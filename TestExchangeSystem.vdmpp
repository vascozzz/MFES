class TestExchangeSystem is subclass of MyTestCase
/*
  Contains the test cases for the exchange system.
  Illustrates a scenario-based testing approach.
  The test cases aim to cover all usage scenarios as well as all states and transitions.
*/

operations
	-- Auxiliary. Inserts all products from a set of products into the system.
	private insertProducts: ExchangeSystem * set of Product ==> ()
	insertProducts(ex, products) ==
	(
		for all product in set products do
			ex.insertProduct(product);
	);
	
	-- Auxiliary. Inserts all orders from a set of orders into the system.
	private insertOrders: ExchangeSystem * set of Order ==> ()
	insertOrders(ex, orders) ==
	(
		for all order in set orders do
			ex.insertOrder(order);
	);
	
	/***** TEST CASES WITH VALID INPUTS ******/
	
	-- Scenario 1:
	-- The system administrator should be able configure the products that are allowed to be bought/sold.
	public testInsertProducts: () ==> ()
	testInsertProducts() == 
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod1 : Product := new Product(mk_token("car"));
		dcl prod2 : Product := new Product(mk_token("phone"));
		
		insertProducts(ex, {prod1, prod2});
		assertEqual(ex.products, {prod1, prod2});
	);
	
	-- Scenario 2:
	-- The system administrator should be able to remove a product and all orders associated to it.
	public testRemoveProducts: () ==> ()
	testRemoveProducts() == 
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod1 : Product := new Product(mk_token("car"));
		dcl prod2 : Product := new Product(mk_token("phone"));
		dcl order1 : Order := new Order(<SELL>, prod1, {|->}, 0, 100);
		dcl order2 : Order := new Order(<SELL>, prod2, {|->}, 0, 100);

		insertProducts(ex, {prod1, prod2});
		insertOrders(ex, {order1, order2});
		
		ex.removeProduct(prod1);
		assertEqual(ex.products, {prod2});
		assertEqual(ex.orders, {order2});
		
		ex.removeProduct(prod2);
		assertEqual(ex.products, {});
		assertEqual(ex.orders, {});
	);
	
	-- Scenario 3:
	-- The end user (buyer or seller) should be to place a new order on the system (either buying or selling).
	public testInsertOrder: () ==> ()
	testInsertOrder() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod : Product := new Product(mk_token("phone"));
		dcl order : Order := new Order(<SELL>, prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Samsung")}, 0, 100);
		
		insertProducts(ex, {prod});
		insertOrders(ex, {order});
		
		assertEqual(ex.orders, {order});
		assertEqual(ex.products, {prod});
	);
	
	-- Scenario 4:
	-- The end user (buyer or seller) should be able to cancel an order previously placed if it has not yet been matched.
	public testCancelOrder: () ==> ()
	testCancelOrder() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod : Product := new Product(mk_token("phone"));
		dcl order : Order := new Order(<SELL>, prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Samsung")}, 0, 100);
		
		insertProducts(ex, {prod});
		insertOrders(ex, {order});
		
		ex.cancelOrder(order);	
		assertEqual(ex.orders, {});
	);

	-- Scenario 5:
	-- The end user (buyer or seller) should be able to check all orders that match a given order.
	public testCheckMatches: () ==> ()
	testCheckMatches() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		
		dcl prod1 : Product := new Product(mk_token("car"));
		dcl prod2 : Product := new Product(mk_token("phone"));
		
		dcl order1: Order := new Order(<BUY>,  prod1, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 0, 100);
		dcl order2 : Order := new Order(<SELL>, prod1, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 1000, 2000);
		dcl order3 : Order := new Order(<SELL>, prod1, {|->}, 30, 50);
		dcl order4 : Order := new Order(<SELL>,  prod2, {"color" |-> mk_token("red"), "brand" |-> mk_token("Samsung")}, 0, 100);
		dcl order5 : Order := new Order(<SELL>, prod1, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 30, 50);
		
		insertProducts(ex, {prod1, prod2});
		
		-- should return no matches because order2's price range does not intersect
		insertOrders(ex, {order1, order2});
		assertEqual(ex.matchOrder(order1), {});
		
		-- should return no matches because order3 has none of the required attributes
		insertOrders(ex, {order3});
		assertEqual(ex.matchOrder(order1), {});
		
		-- should return no matches because order4 has a diff key->value on a required key
		insertOrders(ex, {order4});
		assertEqual(ex.matchOrder(order1), {});
		
		-- should return, since the new order matches
		insertOrders(ex, {order5});
		assertEqual(ex.matchOrder(order1), {order5});
		
		-- if we switch them, we should get order one
		assertEqual(ex.matchOrder(order5), {order1});
	);
	
	-- Scenario 6:
	-- The end user (buyer or seller) should be able to make a trade by matching two given orders.
	public testPickOrder: () ==> ()
	testPickOrder() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod : Product := new Product(mk_token("car"));
		dcl order1: Order := new Order(<BUY>,  prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 0, 100);
		dcl order2 : Order := new Order(<SELL>, prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 30, 50);

		insertProducts(ex, {prod});
		insertOrders(ex, {order1, order2});
		ex.pickMatch(order1, order2);
		
		-- If we switch the orders, picking should still work
		
		order1 := new Order(<BUY>,  prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 0, 100);
		order2 := new Order(<SELL>, prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 30, 50);

		insertOrders(ex, {order1, order2});
		ex.pickMatch(order2, order1);
	);
	
	-- Scenario 7:
	-- The end user (buyer or seller) should be able to check all transactions previously completed.
	public testCheckHistory: () ==> ()
	testCheckHistory() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod : Product := new Product(mk_token("car"));
		
		dcl buyOrder: Order := new Order(<BUY>,  prod, {"cor" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 0, 100);
		dcl sellOrder : Order := new Order(<SELL>, prod, {"cor" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 30, 50);
		
		dcl lastTransaction : Transaction;
	
		insertProducts(ex, {prod});
		insertOrders(ex, {buyOrder, sellOrder});
		ex.pickMatch(buyOrder, sellOrder);
		
		assertEqual(len ex.history, 1);
		assertEqual(ex.getHistory(), ex.history);
	
		lastTransaction := ex.getLastTransaction();
		assertEqual(ex.history, [lastTransaction]);
		assertEqual(ex.getHistory(), ex.history);
		
		assertEqual(lastTransaction.buyOrder, buyOrder);
		assertEqual(lastTransaction.sellOrder, sellOrder);
	);
	
	/***** TEST CASES WITH INVALID INPUTS ******/
	
	public testFailPickOrder: () ==> ()
	testFailPickOrder() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod : Product := new Product(mk_token("car"));
		dcl order1: Order := new Order(<BUY>,  prod, {"color" |-> mk_token("blue"), "brand" |-> mk_token("Nissan")}, 0, 100);
		dcl order2 : Order := new Order(<SELL>, prod, {"color" |-> mk_token("red"), "brand" |-> mk_token("Nissan")}, 30, 50);

		insertProducts(ex, {prod});
		insertOrders(ex, {order1, order2});
		ex.pickMatch(order1, order2);
	);
	
	public testFailInsertProductsSameID: () ==> ()
	testFailInsertProductsSameID() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod1 : Product := new Product(mk_token("id"));
		dcl prod2 : Product := new Product(mk_token("id"));
		
		insertProducts(ex, {prod1, prod2});
	);
	
	-- Attempting to remove a non-existing product.
	public testFailRemoveProduct: () ==> ()
	testFailRemoveProduct() ==
	(
		dcl ex : ExchangeSystem := new ExchangeSystem();
		dcl prod : Product := new Product(mk_token("car"));
		
		ex.removeProduct(prod);
	);
	
	/***** Entry point that runs all tests with valid inputs ******/
  public testAll: () ==> ()
  testAll() == 
  (
  	testInsertProducts();
  	testRemoveProducts();
  	testInsertOrder();
  	testCancelOrder();
  	testCheckMatches();
  	testPickOrder();
  	testCheckHistory();
  );
	
end TestExchangeSystem